#include<bits/stdc++.h>
using namespace std;
inline void qr(int &ret){bool f=0;int sum=0;char ch=getchar();while(ch<'0'||ch>'9')f|=ch=='-',ch=getchar();while(ch>='0'&&ch<='9')sum=(sum<<1)+(sum<<3)+(ch^48),ch=getchar();ret=sum;}
int n,m;
int main()
{
	freopen("chess.in","r",stdin);
	freopen("chess.out","w",stdout);
	int T,q,i,j,col,lv,x,y;
	qr(T);
	while(T)
	{
		T--;
		qr(n),qr(m),qr(q);
		char road_h[n+5][m+5],road_z[n+5][m+5];
		int here[n+5][m+5][2];
		memset(here,-1,sizeof(here));
		for(i=1;i<=n;i++)
			scanf("%s",road_h[i]+1);
		for(i=1;i<n;i++)
			scanf("%s",road_z[i]+1);
		for(i=1;i<=q;i++)
		{
			scanf("%d %d %d %d",&col,&lv,&x,&y);
			int ans=0;
			bool go[n+5][m+5]={};
			queue<pair<pair<int,int>,pair<int,int> > >node;
			node.push(make_pair(make_pair(x,y),make_pair(-1,-1)));//上方向0,下方向1,左方向2,右方向3 
			go[x][y]=1;
			while(!node.empty())
			{
				pair<pair<int,int>,pair<int,int> > t=node.front(),t1=t;
				node.pop();
				if(t.first.first>1&&(!go[t.first.first-1][t.first.second])&&(here[t.first.first-1][t.first.second][0]==-1||(here[t.first.first-1][t.first.second][0]==(!col)&&here[t.first.first-1][t.first.second][1]<=lv)))
				{
					if(t.second.first==-1)
					{
						if(road_z[t.first.first-1][t.first.second]=='1')
						{
							ans++;
							go[t.first.first-1][t.first.second]=1;
						}
						if(road_z[t.first.first-1][t.first.second]=='2')//向上 
						{
							t1.second.first=2;
							t1.second.second=0;
							t1.first.first--;
							ans++;
							if(!(here[t.first.first-1][t.first.second][0]==(!col)&&here[t.first.first-1][t.first.second][1]<=lv))
								node.push(t1);
							go[t.first.first-1][t.first.second]=1;
						}
						if(road_z[t.first.first-1][t.first.second]=='3') 
						{
							t1.second.first=3;
							t1.first.first--;
							ans++;
							if(!(here[t.first.first-1][t.first.second][0]==(!col)&&here[t.first.first-1][t.first.second][1]<=lv))
								node.push(t1);
							go[t.first.first-1][t.first.second]=1;
						}
					}
					if(t.second.first==2&&road_z[t.first.first-1][t.first.second]=='2'&&t.second.second==0)
					{
						t1.first.first--;
						ans++;
						if(!(here[t.first.first-1][t.first.second][0]==(!col)&&here[t.first.first-1][t.first.second][1]<=lv))
							node.push(t1);
						go[t.first.first-1][t.first.second]=1;
					}
					if(t.second.first==3&&road_z[t.first.first-1][t.first.second]=='3')
					{
						t1.first.first--;
						ans++;
						if(!(here[t.first.first-1][t.first.second][0]==(!col)&&here[t.first.first-1][t.first.second][1]<=lv))
							node.push(t1);
						go[t.first.first-1][t.first.second]=1;
					}
				}
				t1=t;
				if(t.first.first<n&&(!go[t.first.first+1][t.first.second])&&(here[t.first.first+1][t.first.second][0]==-1||(here[t.first.first+1][t.first.second][0]==(!col)&&here[t.first.first+1][t.first.second][1]<=lv)))
				{
					if(t.second.first==-1)
					{
						if(road_z[t.first.first][t.first.second]=='1')
						{
							ans++;
							go[t.first.first+1][t.first.second]=1;
						}
						if(road_z[t.first.first][t.first.second]=='2')//向下 
						{
							t1.second.first=2;
							t1.second.second=1;
							t1.first.first++;
							ans++;
							if(!(here[t.first.first][t.first.second][0]==(!col)&&here[t.first.first][t.first.second][1]<=lv))
								node.push(t1);
							go[t.first.first+1][t.first.second]=1;
						}
						if(road_z[t.first.first][t.first.second]=='3') 
						{
							t1.second.first=3;
							t1.first.first++;
							ans++;
							if(!(here[t.first.first+1][t.first.second][0]==(!col)&&here[t.first.first+1][t.first.second][1]<=lv))
								node.push(t1);
							go[t.first.first+1][t.first.second]=1;
						}
					}
					if(t.second.first==2&&road_z[t.first.first][t.first.second]=='2'&&t.second.second==1)
					{
						t1.first.first++;
						ans++;
						if(!(here[t.first.first+1][t.first.second][0]==(!col)&&here[t.first.first+1][t.first.second][1]<=lv))
							node.push(t1);
						go[t.first.first+1][t.first.second]=1;
					}
					if(t.second.first==3&&road_z[t.first.first][t.first.second]=='3')
					{
						t1.first.first++;
						ans++;
						if(!(here[t.first.first+1][t.first.second][0]==(!col)&&here[t.first.first+1][t.first.second][1]<=lv))
							node.push(t1);
						go[t.first.first+1][t.first.second]=1;
					}
				}
				t1=t;
				if(t.first.second>1&&(!go[t.first.first][t.first.second-1])&&(here[t.first.first][t.first.second-1][0]==-1||(here[t.first.first][t.first.second-1][0]==(!col)&&here[t.first.first][t.first.second-1][1]<=lv)))
				{
					if(t.second.first==-1)
					{
						if(road_h[t.first.first][t.first.second-1]=='1')
						{
							ans++;
							go[t.first.first][t.first.second-1]=1;
						}
						if(road_h[t.first.first][t.first.second-1]=='2')//向左 
						{
							t1.second.first=2;
							t1.second.second=3;
							t1.first.second--;
							ans++;
							if(!(here[t.first.first][t.first.second-1][0]==(!col)&&here[t.first.first][t.first.second-1][1]<=lv))
								node.push(t1);
							go[t.first.first][t.first.second-1]=1;
						}
						if(road_h[t.first.first][t.first.second-1]=='3') 
						{
							t1.second.first=3;
							t1.first.second--;
							ans++;
							if(!(here[t.first.first][t.first.second-1][0]==(!col)&&here[t.first.first][t.first.second-1][1]<=lv))
								node.push(t1);
							go[t.first.first][t.first.second-1]=1;
						}
					}
					if(t.second.first==2&&road_h[t.first.first][t.first.second-1]=='2'&&t.second.second==3)
					{
						t1.first.second--;
						ans++;
						if(!(here[t.first.first][t.first.second-1][0]==(!col)&&here[t.first.first][t.first.second-1][1]<=lv))
							node.push(t1);
						go[t.first.first][t.first.second-1]=1;
					}
					if(t.second.first==3&&road_h[t.first.first][t.first.second-1]=='3')
					{
						t1.first.second--;
						ans++;
						if(!(here[t.first.first][t.first.second-1][0]==(!col)&&here[t.first.first][t.first.second-1][1]<=lv))
							node.push(t1);
						go[t.first.first][t.first.second-1]=1;
					}
				}
				t1=t;
				if(t.first.second<m&&(!go[t.first.first][t.first.second+1])&&(here[t.first.first][t.first.second+1][0]==-1||(here[t.first.first][t.first.second+1][0]==(!col)&&here[t.first.first][t.first.second+1][1]<=lv)))
				{
					if(t.second.first==-1)
					{
						if(road_h[t.first.first][t.first.second]=='1')
						{
							ans++;
							go[t.first.first][t.first.second+1]=1;
						}
						if(road_h[t.first.first][t.first.second]=='2')//向右 
						{
							t1.second.first=2;
							t1.second.second=3;
							t1.first.second++;
							ans++;
							if(!(here[t.first.first][t.first.second][0]==(!col)&&here[t.first.first][t.first.second][1]<=lv))
								node.push(t1);
							go[t.first.first][t.first.second+1]=1;
						}
						if(road_h[t.first.first][t.first.second]=='3') 
						{
							t1.second.first=3;
							t1.first.second++;
							ans++;
							if(!(here[t.first.first][t.first.second+1][0]==(!col)&&here[t.first.first][t.first.second+1][1]<=lv))
								node.push(t1);
							go[t.first.first][t.first.second+1]=1;
						}
					}
					if(t.second.first==2&&road_h[t.first.first][t.first.second]=='2'&&t.second.second==3)
					{
						t1.first.second++;
						ans++;
						if(!(here[t.first.first][t.first.second+1][0]==(!col)&&here[t.first.first][t.first.second+1][1]<=lv))
							node.push(t1);
						go[t.first.first][t.first.second+1]=1;
					}
					if(t.second.first==3&&road_h[t.first.first][t.first.second]=='3')
					{
						t1.first.second++;
						ans++;
						if(!(here[t.first.first][t.first.second+1][0]==(!col)&&here[t.first.first][t.first.second+1][1]<=lv))
							node.push(t1);
						go[t.first.first][t.first.second+1]=1;
					}
				}
			}
			here[x][y][0]=col,here[x][y][1]=lv;
			printf("%d\n",ans);
		}
	}
	return 0;
}
